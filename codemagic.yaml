workflows:
  ios_testflight:
    name: iOS → TestFlight
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.carlostechops.mindbreath
        TEAM_ID: LRT5QA283X
        APP_VERSION: 1.0.0

    scripts:
      - name: Get dependencies
        script: flutter pub get

      - name: Install certificate & provisioning profile from env
        script: |
          set -e

          # --- Paths ---
          KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"

          # --- Create & activate a dedicated keychain (password must be NON-empty) ---
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Make keychain usable by codesign without prompts
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"

          # --- Import .p12 from base64 ---
          echo "$P12_BASE64" | base64 --decode > cert.p12
          security import cert.p12 \
            -k "$KEYCHAIN_PATH" \
            -P "$P12_PASSWORD" \
            -T /usr/bin/codesign -T /usr/bin/security

          # Grant access to codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Sanity check (should list an Apple Distribution identity)
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

          # --- Install provisioning profile ---
          mkdir -p "$PROFILES_DIR"
          echo "$MOBILEPROVISION_BASE64" | base64 --decode > "$PROFILES_DIR/MB_AppStore_Profile.mobileprovision"

      - name: Enforce manual signing on Runner & Pods
        script: |
          set -e
          # Runner target
          xcode-project build-settings set CODE_SIGN_STYLE=Manual --project ios/Runner.xcodeproj --targets "Runner"
          xcode-project build-settings set DEVELOPMENT_TEAM=$TEAM_ID --project ios/Runner.xcodeproj --targets "Runner"
          xcode-project build-settings set PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID --project ios/Runner.xcodeproj --targets "Runner"
          xcode-project build-settings set CODE_SIGN_IDENTITY="Apple Distribution" --project ios/Runner.xcodeproj --targets "Runner" --build-config Release
          xcode-project build-settings set PROVISIONING_PROFILE_SPECIFIER="MB_AppStore_Profile" --project ios/Runner.xcodeproj --targets "Runner" --build-config Release

          # Pods-Runner target
          xcode-project build-settings set CODE_SIGN_STYLE=Manual --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner"
          xcode-project build-settings set DEVELOPMENT_TEAM=$TEAM_ID --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner"
          xcode-project build-settings set CODE_SIGN_IDENTITY="Apple Distribution" --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner" --build-config Release
          xcode-project build-settings set PROVISIONING_PROFILE_SPECIFIER="MB_AppStore_Profile" --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner" --build-config Release

      - name: Create export options (App Store)
        script: |
          cat > export_options.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>LRT5QA283X</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.carlostechops.mindbreath</key><string>MB_AppStore_Profile</string>
            </dict>
            <key>destination</key><string>export</string>
          </dict></plist>
          EOF

      - name: Set marketing version & bump build number
        script: |
          if [ -n "$APP_VERSION" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $APP_VERSION" ios/Runner/Info.plist || true
          fi
          BUILD_NUM=${CM_BUILD_ID##*-}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUM" ios/Runner/Info.plist || true

      - name: Build signed IPA (Release)
        script: flutter build ipa --release --export-options-plist=export_options.plist

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/ipa/*.dSYM.zip

    publishing:
      app_store_connect:
        key_id: $APPSTORE_KEY_ID
        issuer_id: $APPSTORE_ISSUER_ID
        api_key: $APPSTORE_PRIVATE_KEY
        submit_to_testflight: true

  android_release:
    name: Android Release (.aab)
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      flutter: stable
      vars:
        MB_BUILD_NAME: "1.0.1"
    scripts:
      - name: Flutter pub get
        script: flutter pub get

      - name: Configure Android signing
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 1) Validate env vars exist and are non-empty
          : "${ANDROID_KEYSTORE_BASE64:?ANDROID_KEYSTORE_BASE64 missing}"
          : "${ANDROID_KEYSTORE_PASSWORD:?ANDROID_KEYSTORE_PASSWORD missing}"
          : "${ANDROID_KEY_ALIAS:?ANDROID_KEY_ALIAS missing}"
          : "${ANDROID_KEY_PASSWORD:?ANDROID_KEY_PASSWORD missing}"

          if [[ -z "${ANDROID_KEYSTORE_BASE64// }" ]]; then echo "ANDROID_KEYSTORE_BASE64 is empty"; exit 1; fi
          if [[ -z "${ANDROID_KEY_ALIAS// }" ]]; then echo "ANDROID_KEY_ALIAS is empty"; exit 1; fi

          # 2) Decode keystore to /tmp (strip any whitespace just in case)
          echo "$ANDROID_KEYSTORE_BASE64" | tr -d '\n\r ' | base64 --decode > /tmp/keystore.jks

          # 3) Sanity-check the keystore (list aliases) WITHOUT exposing secrets
          keytool -list -keystore /tmp/keystore.jks -storepass "$ANDROID_KEYSTORE_PASSWORD" >/tmp/keystore_list.txt 2>/dev/null || {
            echo "❌ Could not open keystore with provided ANDROID_KEYSTORE_PASSWORD"; exit 1;
          }
          echo "Keystore aliases:"
          grep -E '^Alias name:' /tmp/keystore_list.txt || true

          # 4) Ensure the expected alias exists
          if ! grep -q "Alias name: ${ANDROID_KEY_ALIAS}$" /tmp/keystore_list.txt; then
            echo "❌ Alias '${ANDROID_KEY_ALIAS}' not found in keystore."
            echo "   Check ANDROID_KEY_ALIAS. (From your local keytool it should be: upload)"
            exit 1
          fi

          # 5) Write key.properties (include storeType=jks)
          cat > android/app/key.properties <<EOF
          storeFile=/tmp/keystore.jks
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          keyPassword=$ANDROID_KEY_PASSWORD
          storeType=jks
          EOF

          echo "✅ key.properties + keystore.jks written"
          echo "key.properties summary:"
          grep -E '^(storeFile|keyAlias)=' android/app/key.properties

      - name: Build release AAB
        script: |
          flutter build appbundle \
            --release \
            --build-name="$MB_BUILD_NAME" \
            --build-number="$BUILD_NUMBER"

    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
