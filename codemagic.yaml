workflows:
  ios_testflight:
    name: iOS → TestFlight
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      groups:
        - Apple            # loads your P12/Provisioning/App Store Connect vars
      vars:
        BUNDLE_ID: com.carlostechops.mindbreath
        TEAM_ID: LRT5QA283X
        APP_VERSION: 1.0.0

    scripts:
      - name: Get dependencies
        script: flutter pub get

      - name: Install certificate & provisioning profile from env
        script: |
          set -e

          KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"

          echo "$P12_BASE64" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

          mkdir -p "$PROFILES_DIR"
          echo "$MOBILEPROVISION_BASE64" | base64 --decode > "$PROFILES_DIR/MB_AppStore_Profile.mobileprovision"

      - name: Enforce manual signing on Runner & Pods
        script: |
          set -e
          xcode-project build-settings set CODE_SIGN_STYLE=Manual --project ios/Runner.xcodeproj --targets "Runner"
          xcode-project build-settings set DEVELOPMENT_TEAM=$TEAM_ID --project ios/Runner.xcodeproj --targets "Runner"
          xcode-project build-settings set PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID --project ios/Runner.xcodeproj --targets "Runner"
          xcode-project build-settings set CODE_SIGN_IDENTITY="Apple Distribution" --project ios/Runner.xcodeproj --targets "Runner" --build-config Release
          xcode-project build-settings set PROVISIONING_PROFILE_SPECIFIER="MB_AppStore_Profile" --project ios/Runner.xcodeproj --targets "Runner" --build-config Release

          xcode-project build-settings set CODE_SIGN_STYLE=Manual --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner"
          xcode-project build-settings set DEVELOPMENT_TEAM=$TEAM_ID --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner"
          xcode-project build-settings set CODE_SIGN_IDENTITY="Apple Distribution" --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner" --build-config Release
          xcode-project build-settings set PROVISIONING_PROFILE_SPECIFIER="MB_AppStore_Profile" --project ios/Pods/Pods.xcodeproj --targets "Pods-Runner" --build-config Release

      - name: Create export options (App Store)
        script: |
          cat > export_options.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>LRT5QA283X</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.carlostechops.mindbreath</key><string>MB_AppStore_Profile</string>
            </dict>
            <key>destination</key><string>export</string>
          </dict></plist>
          EOF

      - name: Set marketing version & bump build number
        script: |
          if [ -n "$APP_VERSION" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $APP_VERSION" ios/Runner/Info.plist || true
          fi
          BUILD_NUM=${CM_BUILD_ID##*-}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUM" ios/Runner/Info.plist || true

      - name: Build signed IPA (Release)
        script: flutter build ipa --release --export-options-plist=export_options.plist

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/ipa/*.dSYM.zip

    publishing:
      app_store_connect:
        key_id: $APPSTORE_KEY_ID
        issuer_id: $APPSTORE_ISSUER_ID
        api_key: $APPSTORE_PRIVATE_KEY
        submit_to_testflight: true

  android_release:
    name: Android Release (.aab)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      flutter: stable
      groups:
        - Apple            # IMPORTANT: this loads your ANDROID_* secrets (in your "Apple" group)
      vars:
        MB_BUILD_NAME: "1.0.1"

    scripts:
      - name: Flutter pub get
        script: flutter pub get

      - name: Configure Android signing (auto-detect)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          echo "🔎 Detecting keystore source…"

          have_custom=false
          have_cm=false

          [[ -n "${ANDROID_KEYSTORE_BASE64:-}" && -n "${ANDROID_KEY_ALIAS:-}" ]] && have_custom=true
          [[ -n "${CM_KEYSTORE_PATH:-}" && -n "${CM_KEY_ALIAS:-}" ]] && have_cm=true

          if $have_custom; then
            echo "✅ Using custom ANDROID_* secrets"
            : "${ANDROID_KEYSTORE_PASSWORD:?missing ANDROID_KEYSTORE_PASSWORD}"
            : "${ANDROID_KEY_PASSWORD:?missing ANDROID_KEY_PASSWORD}"

            # decode keystore
            echo "${ANDROID_KEYSTORE_BASE64}" | tr -d '\n\r ' | base64 --decode > /tmp/keystore.jks

            # sanity check + alias
            keytool -list -keystore /tmp/keystore.jks -storepass "$ANDROID_KEYSTORE_PASSWORD" >/tmp/ks.txt 2>/dev/null \
              || { echo "❌ Wrong ANDROID_KEYSTORE_PASSWORD"; exit 1; }
            grep -q "Alias name: ${ANDROID_KEY_ALIAS}$" /tmp/ks.txt \
              || { echo "❌ Alias '${ANDROID_KEY_ALIAS}' not found in keystore"; cat /tmp/ks.txt; exit 1; }

            cat > android/app/key.properties <<EOF
            storeFile=/tmp/keystore.jks
            storePassword=$ANDROID_KEYSTORE_PASSWORD
            keyAlias=$ANDROID_KEY_ALIAS
            keyPassword=$ANDROID_KEY_PASSWORD
            storeType=jks
            EOF

          elif $have_cm; then
            echo "✅ Using Codemagic keystore (CM_KEYSTORE_*)"
            : "${CM_KEYSTORE_PASSWORD:?missing}"
            : "${CM_KEY_ALIAS:?missing}"
            : "${CM_KEY_PASSWORD:?missing}"

            keytool -list -keystore "$CM_KEYSTORE_PATH" -storepass "$CM_KEYSTORE_PASSWORD" >/tmp/ks.txt 2>/dev/null \
              || { echo "❌ Wrong CM_KEYSTORE_PASSWORD"; exit 1; }
            grep -q "Alias name: ${CM_KEY_ALIAS}$" /tmp/ks.txt \
              || { echo "❌ Alias '${CM_KEY_ALIAS}' not found in keystore"; cat /tmp/ks.txt; exit 1; }

            cat > android/app/key.properties <<EOF
            storeFile=$CM_KEYSTORE_PATH
            storePassword=$CM_KEYSTORE_PASSWORD
            keyAlias=$CM_KEY_ALIAS
            keyPassword=$CM_KEY_PASSWORD
            storeType=jks
            EOF

          else
            echo "❌ No signing creds found."
            echo "Provide either ANDROID_* secrets (group) OR select a keystore in Distribution so CM_KEYSTORE_* exist."
            exit 1
          fi

          echo "📄 key.properties summary:"
          grep -E '^(storeFile|keyAlias)=' android/app/key.properties || true

      - name: Build release AAB
        script: |
          flutter build appbundle \
            --release \
            --build-name="$MB_BUILD_NAME" \
            --build-number="$BUILD_NUMBER"

    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
